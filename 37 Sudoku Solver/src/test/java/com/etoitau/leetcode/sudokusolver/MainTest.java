package com.etoitau.leetcode.sudokusolver;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * junit5
 */
class MainTest {

    @Test
    void solutionTest() {
        Solution sol = new Solution();
        SudokuChecker sc = new SudokuChecker();
        char[][] board;

        // problem example
        board = new char[][]{
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        sol.solveSudoku(board);
        assertTrue(isFilled(board) && sc.isValidSudoku(board));

        // easy board
        board = new char[][]{
                {'5','.','1','.','3','.','.','.','6'},
                {'4','8','.','.','.','.','.','1','7'},
                {'.','6','.','7','.','.','.','2','5'},
                {'.','.','.','.','2','.','.','8','1'},
                {'6','.','8','4','.','9','5','.','2'},
                {'2','1','.','.','7','.','.','.','.'},
                {'7','9','.','.','.','2','.','5','.'},
                {'8','5','.','.','.','.','.','6','9'},
                {'1','.','.','.','5','.','7','.','3'}
        };
        sol.solveSudoku(board);
        assertTrue(isFilled(board) && sc.isValidSudoku(board));

        // v hard board
        board = new char[][]{
                {'.','5','.', '.','.','9', '.','.','.'},
                {'.','.','8', '.','.','.', '.','.','.'},
                {'.','.','6', '3','1','.', '.','7','.'},

                {'1','2','.', '.','.','7', '.','.','.'},
                {'7','.','.', '5','2','6', '.','.','1'},
                {'.','.','.', '4','.','.', '.','8','7'},

                {'.','9','.', '.','8','2', '7','.','.'},
                {'.','.','.', '.','.','.', '3','.','.'},
                {'.','.','.', '7','.','.', '.','2','.'}
        };
        sol.solveSudoku(board);
        // printBoard(board);
        assertTrue(isFilled(board) && sc.isValidSudoku(board));

        // v hard https://www.websudoku.com/?level=4&set_id=5550391445
        board = new char[][]{
                {'7','.','9', '.','.','3', '.','5','.'},
                {'4','6','.', '8','.','.', '.','.','9'},
                {'.','.','.', '.','.','5', '.','.','.'},

                {'.','.','.', '4','3','8', '.','.','2'},
                {'.','.','.', '.','.','.', '.','.','.'},
                {'8','.','.', '5','1','9', '.','.','.'},

                {'.','.','.', '9','.','.', '.','.','.'},
                {'1','.','.', '.','.','7', '.','3','5'},
                {'.','8','.', '3','.','.', '2','.','7'}
        };
        sol.solveSudoku(board);
        // printBoard(board);
        assertTrue(isFilled(board) && sc.isValidSudoku(board));


        // blank board
        board = new char[][]{
                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'},

                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'},

                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'},
                {'.','.','.', '.','.','.', '.','.','.'}
        };
    }

    boolean isFilled(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') { return false; }
            }
        }
        return true;
    }

    void printBoard(char[][] board) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                sb.append(board[i][j]).append(", ");
            }
            sb.setLength(sb.length() - 2);
            sb.append(System.lineSeparator());
        }
        System.out.println(sb.toString());
    }
}